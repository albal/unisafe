services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: unisafe-postgres-prod
    environment:
      POSTGRES_DB: unisafe
      POSTGRES_USER: unisafe_user
      POSTGRES_PASSWORD: unisafe_password_123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U unisafe_user -d unisafe"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - backend-network

  # Backend API
  backend:
    image: albal/unisafe-backend:latest
    container_name: unisafe-backend-prod
    environment:
      DATABASE_URL: postgres://unisafe_user:unisafe_password_123@postgres:5432/unisafe
      REDIS_URL: redis://redis:6379
      REDDIT_CLIENT_ID: ${REDDIT_CLIENT_ID}
      REDDIT_CLIENT_SECRET: ${REDDIT_CLIENT_SECRET}
      REDDIT_REDIRECT_URI: ${REDDIT_REDIRECT_URI:-http://localhost:3000/auth/callback}
      REDDIT_USER_AGENT: ${REDDIT_USER_AGENT:-UniSafe:v1.0.0 (by /u/unisafe)}
      PORT: 3000
      NODE_ENV: development
      SCAN_INTERVAL_HOURS: 6
      MAX_POSTS_PER_SCAN: 100
      SUBREDDIT: UNIFI
    # No ports exposed - only accessible through nginx proxy
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - backend-network

  # Frontend Web App
  frontend:
    image: albal/unisafe-frontend:latest
    container_name: unisafe-frontend-prod
    environment:
      VITE_API_BASE_URL: /api/v1
    ports:
      - "8080:8080"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - frontend-network
      - backend-network

  # Redis (optional, for caching)
  redis:
    image: redis:7-alpine
    container_name: unisafe-redis-prod
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - backend-network

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge
    # Removed 'internal: true' to allow Reddit API access

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
