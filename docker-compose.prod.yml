services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: unisafe-postgres-prod
    environment:
      POSTGRES_DB: unisafe
      POSTGRES_USER: unisafe_user
      POSTGRES_PASSWORD: unisafe_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U unisafe_user -d unisafe"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - backend-network

  # Backend API
  backend:
    image: albal/unisafe-backend:latest
    container_name: unisafe-backend-prod
    environment:
      DATABASE_URL: postgres://unisafe_user:unisafe_password@postgres:5432/unisafe
      REDIS_URL: redis://redis:6379
      REDDIT_CLIENT_ID: ${REDDIT_CLIENT_ID}
      REDDIT_CLIENT_SECRET: ${REDDIT_CLIENT_SECRET}
      REDDIT_REDIRECT_URI: ${REDDIT_REDIRECT_URI:-http://localhost:3000/auth/callback}
      REDDIT_USER_AGENT: ${REDDIT_USER_AGENT:-UniSafe:v1.0.0 (by /u/unisafe)}
      PORT: 3000
      NODE_ENV: production
      SCAN_INTERVAL_HOURS: 6
      MAX_POSTS_PER_SCAN: 100
      SUBREDDIT: UNIFI
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - backend-network

  # Frontend Web App
  frontend:
    image: albal/unisafe-frontend:latest
    container_name: unisafe-frontend-prod
    environment:
      VITE_API_BASE_URL: http://backend:3000/api/v1
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - frontend-network
      - backend-network

  # Redis (optional, for caching)
  redis:
    image: redis:7-alpine
    container_name: unisafe-redis-prod
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - backend-network

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge
    internal: true

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
